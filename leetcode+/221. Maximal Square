class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if ( matrix.size() == 0 or matrix[0].size() == 0) return 0;
        
        int max = 0;
        int m,n;
        m = matrix.size();
        n = matrix[0].size();
        
        for ( int i = 0 ; i < m ; i++){
            for ( int j = 0 ; j < n ; j++ ){
                std::cout << matrix[i][j];
            }
            std::cout << '\n';
        }
        
        int square[m+1][n+1];
        for ( int i = 0 ; i <= m ; i++){
            for ( int j = 0 ; j <= n ; j++ ){
                square[i][j] = 0;
            }
        }
        
        for ( int i = m - 1 ; i >= 0 ; i--){
            for ( int j = 1 ; j <= n ; j++ ){
                if ( matrix[i][j-1] == '1'){
                    square[i][j] = get_min(square[i+1][j],square[i][j-1],square[i+1][j-1])+ 1;
                }
                if (square[i][j] > max) max = square[i][j];             
            }
        }
        std::cout << '\n';
        
        for ( int i = 0 ; i < m+1 ; i++){
            for ( int j = 0 ; j < n+1 ; j++ ){
                std::cout << square[i][j] << ' ';
            }
            std::cout << '\n';
        }
        
        return max*max;
        
    }
    
    int get_min(int a, int b, int c){
        int res;
        res = ( a > b) ? b : a;
        res = ( res > c) ? c : res;
        return res;
    }
};

