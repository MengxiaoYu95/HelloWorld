class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        
        std::vector<int> pending;
        
        std::vector<int> sums;
        
        int largest_sum = INT_MIN;
        
        int largest_number = INT_MIN;
        
        for(auto it = nums.begin(); it != nums.end(); it++){
            if (*it > largest_number){
                largest_number = *it;
            }
            pending = sums;
            sums.clear();
            if (*it > 0){
                sums.push_back(*it);
            }
            for(auto pit = pending.begin(); pit != pending.end(); pit++){
                *pit += *it;

                if (*pit > 0){
                    sums.push_back(*pit);
                }
                
                if (*pit > largest_sum ){
                    largest_sum = *pit;
                }
                std::cout << *pit << '\n';
                
            }

        }
        
        return largest_sum > largest_number ? largest_sum : largest_number;
    }
};
Runtime: 56 ms, faster than 5.37% of C++ online submissions for Maximum Subarray.
Memory Usage: 10 MB, less than 5.88% of C++ online submissions for Maximum Subarray.


class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if (1 == nums.size()) {
            return nums[0];
        }
        
        int lastValue = nums[0];
        int maxValue = lastValue;
        for (int i = 1; i < nums.size(); i++) {
            if (lastValue <= 0) {
                lastValue = nums[i];
            } else {
                lastValue += nums[i];
            }
            if (maxValue < lastValue) {
                maxValue = lastValue;
            }
        }
        
        return maxValue;
    }
};

O(n)解法

