/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.empty()) return NULL;
        ListNode* head;
        ListNode* current_node;
        ListNode* next_node;
        int current_val = INT_MAX;
        int next_val = INT_MAX;
        int index = 0;
        std::vector<ListNode*> new_lists; 
        
        for (int i=0; i< lists.size(); i++){
            if (lists[i] != NULL){
                new_lists.push_back(lists[i]);
            }
            else{
                continue;
            }
         
        }
        
        lists = new_lists;
        
        for (int i=0; i< lists.size(); i++){
            
            if (lists[i]->val < next_val){
                next_val = lists[i]->val;
                std::cout << next_val<< '/n';
                
                index = i;
            }
        }
        
        if (lists.empty()) return NULL;
        
        current_node = lists[index];
        
        std::cout << current_node->val;
        head = current_node;
        
        
        std::cout << lists.size();
        
        std::cout <<  'index =' << index << '/n';
        
        if (lists[index]->next != NULL){
            lists[index] = lists[index]->next;

        }
        else{
            lists.erase(lists.begin()+index);
        }
        std::cout << lists.size();
        
        while(! lists.empty()){
            next_val = INT_MAX;

            for (int i=0; i< lists.size(); i++){
                if (lists[i]->val < next_val){
                    next_val = lists[i]->val;
                    index = i;
                }
            }
            
            next_node = lists[index];
            current_node->next = next_node;
            current_node = next_node;
            
            std::cout <<  current_node->val;
            
            if (lists[index]->next){
                lists[index] = lists[index]->next;
                
            }
            else{
                lists.erase(lists.begin()+index);
            }
            
        }
        
        return head;
    }
};
Runtime: 212 ms, faster than 19.64% of C++ online submissions for Merge k Sorted Lists.
Memory Usage: 10.9 MB, less than 83.33% of C++ online submissions for Merge k Sorted Lists.
还他妈能再慢一点吗？？？？
