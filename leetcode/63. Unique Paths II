class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        
        

        
        for(int i = 0; i < m; i++){
            if (obstacleGrid[i][0]==1){
                break;
            }
            obstacleGrid[i][0] = -1;
        }
        for(int j = 0; j < n; j++){
            if (obstacleGrid[0][j]==1){
                break;
            }
            obstacleGrid[0][j] = -1;
        }
        
        std::vector<vector<long>> grid;
        for(int i = 0; i < m; i++){
            std::vector<long> line;
            grid.push_back(line);
            for(int j = 0; j < n; j++){
                grid[i].push_back(obstacleGrid[i][j]);
            }
        }
        
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                if (grid[i][j]==1){
                    continue;
                }
                else if (grid[i-1][j]==1){
                    grid[i][j] = grid[i][j-1];
                }
                else if (grid[i][j-1]==1){
                    grid[i][j] = grid[i-1][j];
                }
                else{
                    grid[i][j] = grid[i-1][j] + grid[i][j-1];
                }
            }
        }
        
        if (grid[m-1][n-1] > 0){
            return 0;
        }
        
        return -1*grid[m-1][n-1];
    }
};

Runtime: 4 ms, faster than 75.27% of C++ online submissions for Unique Paths II.
Memory Usage: 9.5 MB, less than 10.00% of C++ online submissions for Unique Paths II.
反正不停的递龟肯定会超出内存限制啦
