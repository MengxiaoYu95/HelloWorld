#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <tuple>

std::tuple<int,int> choose_path(std::vector<int> nums){
    if ( nums.size() == 1 ){
        return ( std::make_tuple(1,nums[0]) );
    }
    else if ( nums.size() == 2 ){
        if ( nums[0] > nums[1] ){
            return ( std::make_tuple(1,nums[0]) );
        }
        else{
            return ( std::make_tuple(1,nums[1]) );
        }
    }
    else if ( nums.size() == 3 ){
        if ( nums[0] + nums[2] > nums[1] ){
            return ( std::make_tuple(2,nums[0]+nums[2]) );
        }
        else{
            return ( std::make_tuple(1,nums[1]) );
        }
    }

    int first = nums[0];
    int first_count = 1;
    std::vector<int>::const_iterator first_begin = nums.begin() + 2;
    std::vector<int>::const_iterator first_end = nums.end();

    //std::cout << *first_begin << ' ';

    std::vector<int> first_path(first_begin,first_end);
    int first_sum = std::get<1>(choose_path(first_path));
    first_count += std::get<0>(choose_path((first_path)));


    int second = nums[1];
    int second_count = 1;
    std::vector<int>::const_iterator second_begin = nums.begin() + 3;
    std::vector<int>::const_iterator second_end = nums.end();
    std::vector<int> second_path(second_begin,second_end);
    int second_sum = std::get<1>(choose_path(second_path));
    second_count += std::get<0>(choose_path((second_path)));


    if ( first_sum > second_sum ){
        return std::make_tuple(first_count,first+first_sum);
    }
    else if ( first_sum < second_sum ){
        return std::make_tuple(second_count,second+second_sum);
    }
    else{
        if ( first_count < second_count ){
            return std::make_tuple(first_count,first+first_sum);
        }
        else{
            return std::make_tuple(second_count,second+second_sum);
        }
    }




    auto a = std::make_tuple(10,10);
    return a;
}

int main(){

    int i;
    int j;
    std::vector<int> a;

//    int number = 100;
//    for ( i = number ; i > 0 ; i--){
//        std::cout << rand()%100 << ' ';
//    }
    while ( std::cin >> i){
        while ( i > 0 ){
            std::cin >> j;
            i -= 1;
            a.push_back(j);
        }
//        for ( auto it = a.begin(); it != a.end() ; it++){
//            std::cout << *it << ' ';
//        }
        i = std::get<0>(choose_path(a));
        j = std::get<1>(choose_path(a));
        std::cout  <<  j << ' ' << i << '\n' ;
        a.clear();
    }



}


//15 123 456 786 453 46 7 5 3 665 453456 745 456 786 453 123
//30 3 6 0 123 3 453 7 3 9 453456 13 453 14 123 6 7 1 456 2 786 4 46 8 665 9 453456 11 456 12 786
//24 7907 610 4359 55 812 3002 10706 2470 8332 8573 3840 8105 9213 10159 11882 6517 7357 6398 4586 215 3420 4927 7159 9414
//10 85 122 46 55 110 47 77 119 50 58

————————————————————————————————————————————————————————————————————————————————————————————————————超时，复杂度过高
