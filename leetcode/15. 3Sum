class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        
        vector<vector<int>> result;
        
        if( nums.size() < 3 ){
            return result;
        }
        
        vector<int> triplets;
        std::sort(nums.begin(),nums.end());
        
        int temp = 0;
        int land_mark = *(nums.end()-1) + 1;
        int sec_land_mark = land_mark;
            
        for(auto it = nums.begin(); it != nums.end() - 2; it++){
            if(*it == land_mark){
                continue;
            }
            for(auto sec_it = it + 1; sec_it != nums.end() - 1; sec_it++){
                if(*sec_it == sec_land_mark){
                    continue;
                }
                temp = *it + *sec_it;
                for(auto third_it = sec_it + 1; third_it != nums.end(); third_it++){
                    if (*third_it == -temp){
                        triplets = {*it,*sec_it,*third_it};
                        result.push_back(triplets);
                        //third_it = nums.end();
                        break;
                    }
                }
                sec_land_mark = *sec_it;
                
            }
            land_mark = *it;
        }
        return result;
    }
};

---------------------------------------------超时-------------------------

class Solution {
public:
        vector<vector<int>> threeSum(vector<int>& nums) {
        std::vector<vector<int>> result;
        if (nums.empty()) {
            return result;
        }

        std::size_t n_size = nums.size();
        std::sort(nums.begin(), nums.end());
        for (int i = 0; i < n_size; ++i) {
            // all numbers from now on will be greater than 0, no point in continuing
            if (nums[i] > 0) break;

            // we have seen this number & combo before; skip
            if (i > 0 and nums[i] == nums[i-1]) continue;

            int left = i+1, right = n_size - 1;
            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];
                if (sum < 0) {
                    ++left;
                } else if (sum > 0) {
                    --right;
                } else {
                    result.push_back({nums[i], nums[left], nums[right]});
                    int last_left = nums[left], last_right = nums[right];
                    // we have seen this number & combo before; skip
                    while (left < right && nums[left] == last_left) ++left;
                    while (left < right && nums[right] == last_right) --right;
                }
            }

        }
        return result;
    }
};
