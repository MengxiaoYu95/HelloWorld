class Solution { //垃圾做法，复杂度n*n，果断超时不犹豫
public:
    int longestValidParentheses(string s) {
        int size = s.size();
        int matrix[size+1][size+1];

        for (int i = 0; i <= size ; i++ ){ //初始化矩阵
            for ( int j = 0; j <= size ;j++ ){
                matrix[i][j] = 0;
            }
        }

        std::stack<char> stk; //存储左括号，碰到右括号时pop
        int max = 0;

        for(int i = 0 ; i < size ; i++ ){
            if ( s[i] == ')' ) continue;
            while ( ! stk.empty() ){
                stk.pop();
            }
            stk.push(s[i]);

            for ( int j = i + 1 ; j < size ; j++ ){
                if ( s[j] == '(' ){
                    stk.push(s[j]);
                }
                else if ( s[j] == ')' && ! stk.empty()){
                    stk.pop();
                    if ( stk.empty () ){
                        max = ( max > j - i + 1) ? max : j - i + 1;
                    }
                }
                else {
                    break;
                }
            }

        }
        return max;
    }
};  



class Solution { //用了dp一下就厉害了（ 看了题解想怎么写就怎么写
public:
    int longestValidParentheses(string s) {
        int size = s.size();
        int matrix[size+1];
        for ( int i = 0; i <= size ; i++ ){
            matrix[i] = 0;
        }

        int max = 0;
        std::stack<int> stk; 
        for ( int i = 1 ; i <= size ; i++ ){ //如果碰到右括号，检测之前的左括号，假如没有左括号说明是无效右括号
            if ( s[i-1] == '('){             //如果有左括号，则两个括号组成的 $有效括号范围 为 $(下标之差+1)
                stk.push(i);                 //还需要加上 左括号之前1位的matrix数组内的值，即检测是否是连续有效括号组
                continue;
            }
            else if ( s[i-1] == ')'){
                if ( ! stk.empty() ){
                    matrix[i] = i - stk.top() + 1;
                    matrix[i] += matrix[stk.top() - 1];
                    stk.pop();
                    max = ( max > matrix[i] ) ? max : matrix[i];
                }
            }
        }
        return max; 
    }
};
