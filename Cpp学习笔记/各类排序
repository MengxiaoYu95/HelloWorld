#include <vector>  //冒泡排序，从后往前更新，每次比较两个，如果较小就互换，第一次0-i，第二次1-i。。。以此类推，复杂度为N^2
#include <iostream>

int main(){
    std::vector<int> nums = {5,4,6,8,7,9,1,2,3};

    int len = nums.size();

    for ( int i = 0 ; i < len ; i++ ){
        for ( int j = len - 1; j >= i ; j-- ){
            if ( nums[j] < nums[j-1] ){
                int temp = nums[j-1];
                nums[j-1] = nums[j];
                nums[j] = temp;
            }
        }
    }

    for ( int i = 0 ; i < len ; i++ ){
        std::cout << nums[i] << ' ';
    }
}


#include <vector>  //插入排序，每次只交换最前一位和最小一位，复杂度一样是N平方
#include <iostream>

int main(){
    std::vector<int> nums = {5,4,6,8,7,9,1,2,3};

    int len = nums.size();
    int min,index;

    for ( int i = 0 ; i < len ; i++ ){
        min = nums[i];
        index = i;
        for ( int j = len - 1; j >= i ; j-- ){

            if ( nums[j] < min ){
                min = nums[j];
                index = j;
            }
        }
        nums[index] = nums[i];
        nums[i] = min;
    }

    for ( int i = 0 ; i < len ; i++ ){
        std::cout << nums[i] << ' ';
    }
}


#include <vector> //插入排序。。。每次假定前面是已排序好的，找到位置插入后一个
#include <iostream>

int main(){
    std::vector<int> nums = {5,4,6,8,7,9,1,2,3};

    int len = nums.size();
    int min,index;

    for ( int i = 0 ; i < len ; i++ ){
        int j = i;
        int temp = nums[i];
        while ( nums[j] < nums[j-1] ){
            temp = nums[j-1];
            nums[j-1] = nums[j];
            nums[j] = temp;
            j--;
        }
    }

    for ( int i = 0 ; i < len ; i++ ){
        std::cout << nums[i] << ' ';
    }
}



#include <vector> //快速排序，2分法，复杂度NlogN
#include <iostream>

void quick_sort(std::vector<int>::iterator, std::vector<int>::iterator);

int main(){
    std::vector<int> nums = {5,4,6,8,7,9,1,2,3};

    auto first_it= nums.begin();
    auto last_it = nums.end() -1 ;

    quick_sort(first_it,last_it );

    for( auto i = nums.begin(); i != nums.end() ; i++ ){
        std::cout << *i << ' ';
    }



}

void quick_sort(std::vector<int>::iterator first, std::vector<int>::iterator last){

    if ( first == last ){
        return;
    }
    auto standard = first;



    auto end = last;

    while ( first != last ){
        if ( *last > *standard ){
            last -= 1;
        }
        else if ( *first <= *standard ){
            first += 1;
        }
        else{
            int temp = *first;

            *first = *last;
            *last = temp;
        }
    }
    int temp = *standard;


   *standard = *first;
   *first = temp;





    if ( standard != first){
        quick_sort(standard,first-1);
    }

    if ( first != end){
        quick_sort(first+1,end);
    }


}


#include <vector> //归并排序，分治法，每次拆成更小的区块然后排序合并  
#include <iostream>

void merge(std::vector<int>::iterator first, std::vector<int>::iterator last);
void merge_process(std::vector<int>::iterator first, std::vector<int>::iterator last);


int main(){
    std::vector<int> nums = {5,4,6,8,7,9,1,2,3};
    auto first = nums.begin();
    auto last = nums.end() - 1;

    merge_process(first,last);

    for ( auto it = nums.begin() ; it != nums.end() ; it++ ){
        std::cout << *it << ' ';
    }

}
//5,4,6,8,7,9,1,2,3

void merge(std::vector<int>::iterator first,std::vector<int>::iterator mid, std::vector<int>::iterator last){

    int flag = 0;
    auto land_mark = first;
    auto second = mid + 1;

    std::vector<int> container;
    while ( 1 ){
        if ( *first < *second ){
            container.emplace_back(*first);
            if ( first == mid) {
                flag = 1;
                break;
            };
            first += 1;
        }
        else{

            container.emplace_back(*second);
            if ( second == last ) {
                flag = 2;
                break;
            }
            second += 1;
        }
    }


    if ( flag == 1 ){
        while( 1 ){
            container.emplace_back( *second );
            if ( second == last ) break;
            second += 1 ;
        }
    }
    else {
        while ( 1 ){
            container.emplace_back( *first );
            if ( first == mid) break;
            first += 1;
        }
    }


    for ( auto it = container.begin() ; it != container.end() ; it++ ){
        *land_mark = *it;
        land_mark += 1;
    }
}

void merge_process(std::vector<int>::iterator first, std::vector<int>::iterator last){
    if ( last == first ){
        return;
    }
    if ( ( last - first ) == 1 ){
        if ( *first < *last ){
            return;
        }
        else {
            int temp = *first;
            *first = *last;
            *last = temp;
            return;
        }
    }


    auto mid = first + (last - first)/2;
    merge_process(first,mid);
    merge_process(mid+1,last);
    merge(first,mid,last);
}
